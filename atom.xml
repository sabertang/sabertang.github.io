<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简简单单每一天</title>
  <subtitle>快乐生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sabertang.github.io/"/>
  <updated>2017-02-07T09:29:50.035Z</updated>
  <id>https://sabertang.github.io/</id>
  
  <author>
    <name>saber</name>
    <email>269341127@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ManagedDataAccess不能识别解决方法</title>
    <link href="https://sabertang.github.io/2017/02/07/ManagedDataAccess%E4%B8%8D%E8%83%BD%E8%AF%86%E5%88%AB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://sabertang.github.io/2017/02/07/ManagedDataAccess不能识别解决方法/</id>
    <published>2017-02-07T09:24:50.000Z</published>
    <updated>2017-02-07T09:29:50.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ManagedDataAccess托管方式报错"><a href="#ManagedDataAccess托管方式报错" class="headerlink" title="ManagedDataAccess托管方式报错"></a>ManagedDataAccess托管方式报错</h3><pre><code>Failed to load provider **Oracle.ManagedDataAccess.Client** - 找不到请求的 .Net Framework Data Provider。可能没有安装。
</code></pre><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li>从<a href="http://www.oracle.com/technetwork/database/windows/downloads/utilsoft-087491.html" target="_blank" rel="external">oralce 官网</a>下载odac文件</li>
<li>解压文件 在cmd命令行中执行<code>install_odpm.bat</code>，注意<strong>加参数</strong></li>
<li>成功</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ManagedDataAccess托管方式报错&quot;&gt;&lt;a href=&quot;#ManagedDataAccess托管方式报错&quot; class=&quot;headerlink&quot; title=&quot;ManagedDataAccess托管方式报错&quot;&gt;&lt;/a&gt;ManagedDataAccess
    
    </summary>
    
      <category term="C＃" scheme="https://sabertang.github.io/categories/C%EF%BC%83/"/>
    
    
  </entry>
  
  <entry>
    <title>C＃实现对文件目录的实时监控</title>
    <link href="https://sabertang.github.io/2017/02/06/C%EF%BC%83%E5%AE%9E%E7%8E%B0%E5%AF%B9%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%9A%84%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7/"/>
    <id>https://sabertang.github.io/2017/02/06/C＃实现对文件目录的实时监控/</id>
    <published>2017-02-06T09:14:54.000Z</published>
    <updated>2017-02-07T01:05:53.266Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>本文主要描述如何通过C＃实现实时监控文件目录下的变化，包括文件和目录的添加，删除，修改和重命名等操作。</p>
</li>
<li><p>首先，我们需要对.net提供的<strong>FileSystemWatcher</strong>类有所了解。我有些懒，找了MSDN对该类的描述。</p>
</li>
<li><p>FileSystemWatcher类侦听文件系统更改通知，并在目录或目录中的文件发生更改时引发事件。</p>
</li>
<li><p>使用 FileSystemWatcher 监视指定目录中的更改。可监视指定目录中的文件或子目录的更改。可以创建一个组件来监视本地计算机、网络驱动器或远程计算机上的文件。</p>
</li>
<li><p>若要监视所有文件中的更改，请将 Filter 属性设置为空字符串 (“”) 或使用通配符（“<em>.</em>”）。若要监视特定的文件，请将 Filter 属性设置为该文件名。例如，若要监视文件 MyDoc.txt 中的更改，请将 Filter 属性设置为“MyDoc.txt”。也可以监视特定类型文件中的更改。例如，若要监视文本文件中的更改，请将 Filter 属性设置为“*.txt”。</p>
</li>
<li><p>可监视目录或文件中的若干种更改。例如，可监视文件或目录的 Attributes、LastWrite 日期和时间或 Size 方面的更改。通过将 NotifyFilter 属性设置为 NotifyFilters 值之一来达到此目的。有关可监视的更改类型的更多信息，请参见 NotifyFilters。</p>
</li>
<li><p>可监视文件或目录的重命名、删除或创建。例如，若要监视文本文件的重命名，请将 Filter 属性设置为“*.txt”，并使用为其参数指定的 Renamed 来调用 WaitForChanged 方法。</p>
</li>
<li><p>Windows 操作系统在 FileSystemWatcher 创建的缓冲区中通知组件文件发生更改。如果短时间内有很多更改，则缓冲区可能会溢出。这将导致组件失去对目录更改的跟踪，并且它将只提供一般性通知。使用 InternalBufferSize 属性来增加缓冲区大小的开销较大，因为它来自无法换出到磁盘的非页面内存，所以应确保缓冲区大小适中（尽量小，但也要有足够大小以便不会丢失任何文件更改事件）。若要避免缓冲区溢出，请使用 NotifyFilter 和 IncludeSubdirectories 属性，以便可以筛选掉不想要的更改通知。</p>
</li>
</ul>
<h3 id="使用-FileSystemWatcher-类时，请注意以下事项。"><a href="#使用-FileSystemWatcher-类时，请注意以下事项。" class="headerlink" title="使用 FileSystemWatcher 类时，请注意以下事项。"></a>使用 FileSystemWatcher 类时，请注意以下事项。</h3><ol>
<li>对包括隐藏文件(夹)在内的所有文件(夹)进行监控。</li>
<li>您可以为 InternalBufferSize 属性（用于监视网络上的目录）设置的最大大小为 64 KB。</li>
</ol>
<p>FileSystemWatcher的实例监控到文件(夹)的变化后，会触发相应的事件，其中文件(夹)的添加，删除和修改会分别触发Created，Deleted，Changed事件，文件(夹)重命名时触发OnRenamed事件。</p>
<p>然后，在熟悉了FileSystemWatcher类后，我们开始自己的程序编写。</p>
<p>实例化FileSystemWatcher类，并传入需要监控的目录路径，以及是否制定监控的文件类型（文章前面有所介绍）。</p>
<pre><code>_watcher = new FileSystemWatcher(_path, _filter);
</code></pre><p>注册监听事件，以及编写事件触发后相关的处理逻辑。</p>
<pre><code>_watcher.Created += new FileSystemEventHandler(OnChanged);     
_watcher.Changed += new FileSystemEventHandler(OnChanged);    
_watcher.Deleted += new FileSystemEventHandler(OnChanged);      
_watcher.Renamed += new RenamedEventHandler(OnRenamed);    
_watcher.IncludeSubdirectories = true;       
_watcher.EnableRaisingEvents = true;    
</code></pre><p>在本程序中，专门定义了一个FileChangeInformation类来记录文件变化信息，并定义了一个CustomQueue类，该类类似于Queue类，是一个数据先进先出的集合，用来存储所有的文件变化消息，并提供数据持久化功能。              </p>
<p>监控类 - FileWatcher，代码如下：<br>    /// <summary><br>    /// 文件监控类，用于监控指定目录下文件以及文件夹的变化<br>    /// </summary><br>    public class FileWatcher<br>    {<br>        private FileSystemWatcher _watcher = null;<br>        private string _path = string.Empty;<br>        private string _filter = string.Empty;<br>        private bool _isWatch = false;<br>        private CustomQueue<filechangeinformation> _queue = null;</filechangeinformation></p>
<pre><code>    /// &lt;summary&gt;
    /// 监控是否正在运行
    /// &lt;/summary&gt;
    public bool IsWatch
    {
        get
        {
            return _isWatch;
        }
    }

    /// &lt;summary&gt;
    /// 文件变更信息队列
    /// &lt;/summary&gt;
    public CustomQueue&lt;FileChangeInformation&gt; FileChangeQueue
    {
        get
        {
            return _queue;
        }
    }

    /// &lt;summary&gt;
    /// 初始化FileWatcher类
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;path&quot;&gt;监控路径&lt;/param&gt;
    public FileWatcher(string path)
    {
        _path = path;
        _queue = new CustomQueue&lt;FileChangeInformation&gt;();
    }
    /// &lt;summary&gt;
    /// 初始化FileWatcher类，并指定是否持久化文件变更消息
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;path&quot;&gt;监控路径&lt;/param&gt;
    /// &lt;param name=&quot;isPersistence&quot;&gt;是否持久化变更消息&lt;/param&gt;
    /// &lt;param name=&quot;persistenceFilePath&quot;&gt;持久化保存路径&lt;/param&gt;
    public FileWatcher(string path, bool isPersistence, string persistenceFilePath)
    {
        _path = path;
        _queue = new CustomQueue&lt;FileChangeInformation&gt;(isPersistence, persistenceFilePath);
    }

    /// &lt;summary&gt;
    /// 初始化FileWatcher类，并指定是否监控指定类型文件
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;path&quot;&gt;监控路径&lt;/param&gt;
    /// &lt;param name=&quot;filter&quot;&gt;指定类型文件，格式如:*.txt,*.doc,*.rar&lt;/param&gt;
    public FileWatcher(string path, string filter)
    {
        _path = path;
        _filter = filter;
        _queue = new CustomQueue&lt;FileChangeInformation&gt;();
    }

    /// &lt;summary&gt;
    /// 初始化FileWatcher类，并指定是否监控指定类型文件，是否持久化文件变更消息
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;path&quot;&gt;监控路径&lt;/param&gt;
    /// &lt;param name=&quot;filter&quot;&gt;指定类型文件，格式如:*.txt,*.doc,*.rar&lt;/param&gt;
    /// &lt;param name=&quot;isPersistence&quot;&gt;是否持久化变更消息&lt;/param&gt;
    /// &lt;param name=&quot;persistenceFilePath&quot;&gt;持久化保存路径&lt;/param&gt;
    public FileWatcher(string path, string filter, bool isPersistence, string persistenceFilePath)
    {
        _path = path;
        _filter = filter;
        _queue = new CustomQueue&lt;FileChangeInformation&gt;(isPersistence, persistenceFilePath);
    }

    /// &lt;summary&gt;
    /// 打开文件监听器
    /// &lt;/summary&gt;
    public void Open()
    {
        if (!Directory.Exists(_path))
        {
            Directory.CreateDirectory(_path);
        }

        if (string.IsNullOrEmpty(_filter))
        {
            _watcher = new FileSystemWatcher(_path);
        }
        else
        {
            _watcher = new FileSystemWatcher(_path, _filter);
        }
        //注册监听事件
        _watcher.Created += new FileSystemEventHandler(OnProcess);
        _watcher.Changed += new FileSystemEventHandler(OnProcess);
        _watcher.Deleted += new FileSystemEventHandler(OnProcess);
        _watcher.Renamed += new RenamedEventHandler(OnFileRenamed);
        _watcher.IncludeSubdirectories = true;
        _watcher.EnableRaisingEvents = true;
        _isWatch = true;
    }

    /// &lt;summary&gt;
    /// 关闭监听器
    /// &lt;/summary&gt;
    public void Close()
    {
        _isWatch = false;
        _watcher.Created -= new FileSystemEventHandler(OnProcess);
        _watcher.Changed -= new FileSystemEventHandler(OnProcess);
        _watcher.Deleted -= new FileSystemEventHandler(OnProcess);
        _watcher.Renamed -= new RenamedEventHandler(OnFileRenamed);
        _watcher.EnableRaisingEvents = false;
        _watcher = null;
    }

    /// &lt;summary&gt;
    /// 获取一条文件变更消息
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public FileChangeInformation Get()
    {
        FileChangeInformation info = null;
        if (_queue.Count &gt; 0)
        {
            lock (_queue)
            {
                info = _queue.Dequeue();
            }
        }
        return info;
    }

    /// &lt;summary&gt;
    /// 监听事件触发的方法
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;
    private void OnProcess(object sender, FileSystemEventArgs e)
    {
        try
        {
            FileChangeType changeType = FileChangeType.Unknow;
            if (e.ChangeType == WatcherChangeTypes.Created)
            {
                if (File.GetAttributes(e.FullPath) == FileAttributes.Directory)
                {
                    changeType = FileChangeType.NewFolder;
                }
                else
                {
                    changeType = FileChangeType.NewFile;
                }
            }
            else if (e.ChangeType == WatcherChangeTypes.Changed)
            {
                //部分文件创建时同样触发文件变化事件，此时记录变化操作没有意义
                //如果
                if (_queue.SelectAll(
                    delegate(FileChangeInformation fcm)
                    {
                        return fcm.NewPath == e.FullPath &amp;&amp; fcm.ChangeType == FileChangeType.Change;
                    }).Count&lt;FileChangeInformation&gt;() &gt; 0)
                {
                    return;
                }

                //文件夹的变化，只针对创建，重命名和删除动作，修改不做任何操作。
                //因为文件夹下任何变化同样会触发文件的修改操作，没有任何意义.
                if (File.GetAttributes(e.FullPath) == FileAttributes.Directory)
                {
                    return;
                }

                changeType = FileChangeType.Change;
            }
            else if (e.ChangeType == WatcherChangeTypes.Deleted)
            {
                changeType = FileChangeType.Delete;
            }

            //创建消息，并压入队列中
            FileChangeInformation info = new FileChangeInformation(Guid.NewGuid().ToString(), changeType, e.FullPath, e.FullPath, e.Name, e.Name);
            _queue.Enqueue(info);
        }
        catch
        {
            Close();
        }
    }

    /// &lt;summary&gt;
    /// 文件或目录重命名时触发的事件
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;
    private void OnFileRenamed(object sender, RenamedEventArgs e)
    {
        try
        {
            //创建消息，并压入队列中
            FileChangeInformation info = new FileChangeInformation(Guid.NewGuid().ToString(), FileChangeType.Rename, e.OldFullPath, e.FullPath, e.OldName, e.Name);
            _queue.Enqueue(info);
        }
        catch
        {
            Close();
        }
    }
}
</code></pre><p>最后，功能调用如下：</p>
<pre><code>//初始化监控器
FileWatcher watcher = new FileWatcher(@&quot;D:\&quot;);
watcher.Open();

FileChangeInformation fci = null;
//获取消息
while (true)
{
    //如果IsWatch为False，则可能监控内部发生异常终止了监控，需要重新开启监控
    if (watcher.IsWatch)
    {
        //队列顶端的变更消息
        fci = watcher.Get();
        //处理消息的代码
        //Print(fci);
    }
    else
    {
        watcher.Open();
    }
    Thread.Sleep(1000);
}
</code></pre><p><em>该程序实现了对文件目录下所有子目录和子文件的变化进行监控，并可通过FileChangeQueue属性访问文件变更消息，同时也可以设置其是否需要将数据持久化到磁盘文件中。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;本文主要描述如何通过C＃实现实时监控文件目录下的变化，包括文件和目录的添加，删除，修改和重命名等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先，我们需要对.net提供的&lt;strong&gt;FileSystemWatcher&lt;/strong&gt;类有所了解。我有些懒
    
    </summary>
    
      <category term="C＃" scheme="https://sabertang.github.io/categories/C%EF%BC%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sabertang.github.io/2017/02/06/hello-world/"/>
    <id>https://sabertang.github.io/2017/02/06/hello-world/</id>
    <published>2017-02-06T05:01:38.255Z</published>
    <updated>2017-02-06T09:34:53.560Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="测试" scheme="https://sabertang.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
</feed>
